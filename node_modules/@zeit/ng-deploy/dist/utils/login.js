"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(require("node-fetch"));
const os_1 = require("os");
const email_prompt_1 = __importDefault(require("email-prompt"));
const ms_1 = __importDefault(require("ms"));
const output_1 = require("./output");
const querystring_1 = require("querystring");
const schematics_1 = require("@angular-devkit/schematics");
const API_ENDPOINT = "https://api.zeit.co";
function login() {
    return __awaiter(this, void 0, void 0, function* () {
        let email;
        let spinner;
        try {
            email = yield email_prompt_1.default({ start: "Enter your email: " });
        }
        catch (e) {
            if (e.message === "User abort") {
                throw new schematics_1.SchematicsException("\nUser aborted email prompt!");
            }
        }
        spinner = output_1.wait(`Sending you an email`);
        let securityCode;
        let vertificationToken;
        try {
            const data = yield registration(email);
            securityCode = data.securityCode;
            vertificationToken = data.token;
            spinner.stop();
        }
        catch (e) {
            throw new schematics_1.SchematicsException(`There was error with token request: ${e.message}`);
        }
        // Empty line
        console.log(`We sent an email to ${output_1.highlight(email)}. Please follow the steps provided\ninside it and make sure the security code matches ${output_1.highlight(securityCode)}.`);
        spinner = output_1.wait("Waiting for your confirmation");
        let token = null;
        while (!token) {
            try {
                yield output_1.sleep(ms_1.default("1s"));
                token = yield vertify(email, vertificationToken);
            }
            catch (e) {
                console.log(e);
            }
        }
        spinner.stop();
        return { token };
    });
}
exports.login = login;
const registration = (email) => __awaiter(this, void 0, void 0, function* () {
    const hyphens = new RegExp("-", "g");
    const host = os_1.hostname()
        .replace(hyphens, " ")
        .replace(".local", "");
    const tokenName = `Now ng-deploy on ${host}`;
    const response = yield node_fetch_1.default(`${API_ENDPOINT}/now/registration`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            email,
            tokenName
        })
    });
    const body = yield response.json();
    if (!response.ok) {
        const { error = {} } = body;
        if (error.code === "invalid_email") {
            throw new schematics_1.SchematicsException(`Provided email: "${email}" is invalid`);
        }
        throw new schematics_1.SchematicsException(`Unexpected error: ${error.message}`);
    }
    return body;
});
const vertify = (email, vertificationToken) => __awaiter(this, void 0, void 0, function* () {
    const query = {
        email,
        token: vertificationToken
    };
    const response = yield node_fetch_1.default(`${API_ENDPOINT}/now/registration/verify?${querystring_1.stringify(query)}`, {
        headers: {
            "Content-Type": "application/json"
        }
    });
    const body = yield response.json();
    return body.token;
});
//# sourceMappingURL=login.js.map