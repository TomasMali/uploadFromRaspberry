"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = __importDefault(require("node-fetch"));
const schematics_1 = require("@angular-devkit/schematics");
const output_1 = require("./output");
exports.getTeamIdFromSlug = (slug, token) => __awaiter(this, void 0, void 0, function* () {
    if (slug !== "") {
        try {
            const response = yield node_fetch_1.default(`https://api.zeit.co/v1/teams?slug=${slug}`, {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            const { id } = yield response.json();
            return id;
        }
        catch (e) {
            if (e.code === "team_unauthorized") {
                throw new schematics_1.SchematicsException(`You have not enought rights to deploy under team: ${output_1.highlight(slug)}`);
            }
            throw new schematics_1.SchematicsException(`There were problem during team fetching: ${e.message}`);
        }
    }
    return undefined;
});
//# sourceMappingURL=scope.js.map