"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const now_client_1 = require("now-client");
const schematics_1 = require("@angular-devkit/schematics");
const output_1 = require("../../utils/output");
const scope_1 = require("../../utils/scope");
function deploy(context, token, options) {
    return __awaiter(this, void 0, void 0, function* () {
        var e_1, _a;
        context.logger.info(`Building your application ðŸ“¦`);
        // Build production code
        if (!options["no-build"]) {
            const build = yield context.scheduleTarget({
                target: "build",
                project: context.target.project,
                configuration: options.configuration
            });
            yield build.result;
        }
        // Empty line
        console.log();
        const spinner = output_1.wait("deploying your application ðŸš€");
        const teamId = yield scope_1.getTeamIdFromSlug(options.scope, token);
        try {
            for (var _b = __asyncValues(now_client_1.createDeployment(context.workspaceRoot, {
                token,
                teamId,
                target: options.target,
                force: options.force
            })), _c; _c = yield _b.next(), !_c.done;) {
                const event = _c.value;
                if (event.type === "ready" || event.type === "created") {
                    spinner.stop();
                    const { url } = event.payload;
                    context.logger.info(`Your application is deployed at: ${output_1.highlight(`https://${url}`)}`);
                    break;
                }
                if (event.type === "error") {
                    console.log(event);
                    throw new schematics_1.SchematicsException(`There was error during your deployment:${event.payload}`);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
exports.deploy = deploy;
//# sourceMappingURL=deploy.js.map