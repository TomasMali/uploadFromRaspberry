"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
class AngularJson {
    constructor(tree) {
        this.tree = tree;
        this.path = "/angular.json";
        this.json = this.getJson();
        this.schema = this.getSchema();
        this.projectName = this.getProjectName({});
        const { project, outputPath } = this.getProject();
        this.project = project;
        this.outputPath = outputPath;
    }
    getJson() {
        const buffer = this.tree.read(this.path);
        if (buffer === null) {
            throw new schematics_1.SchematicsException("Could not find angular.json file");
        }
        return buffer.toString();
    }
    getSchema() {
        let schema;
        try {
            schema = core_1.parseJson(this.json);
        }
        catch (e) {
            throw new schematics_1.SchematicsException(`Could not parse angular.json: ${e.message}`);
        }
        return schema;
    }
    getProjectName(options) {
        let projectName = options.project;
        if (!projectName) {
            if (this.schema.defaultProject) {
                projectName = this.schema.defaultProject;
            }
            else {
                throw new schematics_1.SchematicsException("No project selected or no default project in workspace");
            }
        }
        return projectName;
    }
    getProject() {
        const project = this.schema.projects[this.projectName];
        if (!project) {
            throw new schematics_1.SchematicsException(`Project: ${this.projectName} is not defined in workspace`);
        }
        if (project.projectType !== "application") {
            throw new schematics_1.SchematicsException('Project needs to be "application" in angular.json');
        }
        if (!project.architect ||
            !project.architect.build ||
            !project.architect.build.options ||
            !project.architect.build.options.outputPath) {
            throw new schematics_1.SchematicsException(`Cannot read the output path (architect.build.options.outputPath) of project "${this.projectName}" in angular.json`);
        }
        const outputPath = project.architect.build.options.outputPath;
        return { project, outputPath };
    }
    addDeployArchitect() {
        if (!this.project || !this.project.architect) {
            throw new schematics_1.SchematicsException("An error has occured during modification of angular.json");
        }
        this.project.architect["deploy"] = {
            builder: "@zeit/ng-deploy:deploy"
        };
        this.saveJson();
    }
    getMeta() {
        return { projectName: this.projectName, outputPath: this.outputPath };
    }
    saveJson() {
        this.tree.overwrite(this.path, JSON.stringify(this.schema, null, 2));
    }
}
exports.AngularJson = AngularJson;
//# sourceMappingURL=angular-json.js.map